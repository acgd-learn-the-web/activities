var ActivityRunner = function () {
  "use strict";

  var
    boundListeners = {
      start: null
    },
    screenTimeout,
    screens = {},
    sayings = {
      failure: document.querySelectorAll('[data-screen="failure"] p'),
      success: document.querySelectorAll('[data-screen="success"] p')
    }
  ;

  var escape = function (str) {
    return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
  };

  var findScreens = function () {
    var
      tmpScreens = document.querySelectorAll('[data-screen]'),
      i = 0, t = tmpScreens.length
    ;

    for (i; i<t; i++) {
      screens[tmpScreens[i].getAttribute('data-screen')] = tmpScreens[i];
    }
  };

  var toggleScreen = function (screen) {
    if (screens[screen].hidden) {
      screens[screen].hidden = false;
    } else {
      screens[screen].hidden = true;
    }
  };

  var displayTimedScreen = function (screen, callback) {
    toggleScreen(screen);

    screenTimeout = setTimeout(function () {
      var scn = screen, cb = callback;

      clearTimeout(screenTimeout);
      toggleScreen(scn);

      if (cb) {
        cb();
      }
    }, 700);
  };

  var displaySaying = function (group) {
    var
      i = 0,
      t = group.length,
      rand = Math.floor(Math.random() * t)
    ;

    for (i; i<t; i++) {
      group[i].hidden = true;
    }

    group[rand].hidden = false;
  };

  var displaySuccessScreen = function (callback) {
    displayTimedScreen('success', callback);
    displaySaying(sayings.success);
  };

  var displayFailureScreen = function (callback) {
    displayTimedScreen('failure', callback);
    displaySaying(sayings.failure);
  };

  var displayEndScreen = function () {
    toggleScreen('end');
  };

  var send = function (ev, cb) {
    switch (ev) {
      case 'success':
        displaySuccessScreen(cb);
        break;
      case 'failure':
        displayFailureScreen(cb);
        break;
      case 'end':
        displayEndScreen(cb);
        break;
    }
  };

  var listen = function (ev, cb) {
    boundListeners[ev] = cb;
  };

  var dispatchEvent = function (ev) {
    boundListeners[ev]();
  };

  var bindEvents = function () {
    document.getElementById('start-button').addEventListener('click', function () {
      toggleScreen('start');
      dispatchEvent('start');
    });
  };

  findScreens();
  bindEvents();

  return {
    escape: escape,
    toggleScreen: toggleScreen,
    send: send,
    listen: listen
  }
};

var CodeCompare = function (runner, questions) {
  "use strict";

  var
    editor = null,
    current = 0,
    elems = {
      form: document.getElementById('question-form')
    }
  ;

  var init = function () {
    editor = ace.edit("editor");
    editor.setTheme("ace/theme/idle_fingers");
    editor.getSession().setMode("ace/mode/html");

    editor.getSession().setUseSoftTabs(false);
    editor.getSession().setTabSize(2);
    editor.getSession().setUseWrapMode(false);
    editor.setHighlightActiveLine(true);
    editor.setDisplayIndentGuides(true);
    editor.setShowInvisibles(true);
    editor.setShowPrintMargin(false);
    editor.setShowFoldWidgets(false);
    editor.getSession().setOption('useWorker', false);
  };

  var bindEvents = function () {
    elems.form.addEventListener('submit', function (e) {
      e.preventDefault();
      advanceOrFail();
    });
  };

  var hasAnotherQuestion = function () {
    return !(current == questions.length - 1);
  };

  var populateQuestion = function (id) {
    editor.setValue(questions[id].incorrect);
    editor.navigateFileStart();
    editor.focus();
  };

  var advanceQuestion = function () {
    if (hasAnotherQuestion()) {
      current++;
      populateQuestion(current);
    } else {
      runner.toggleScreen('main');
      runner.send('end');
    }
  };

  var advanceOrFail = function () {
    switch (isAnswerCorrect()) {
      case 'yes':
        runner.send('success', function () {
          advanceQuestion();
        });
        break;

      case 'no':
        runner.send('failure', function () {
          editor.focus();
        });
        break;

      default:
        runner.send('failure', function () {
          editor.focus();
        });
        break;
    }
  };

  var isAnswerCorrect = function () {
    if (editor.getValue() === questions[current].correct) {
      return 'yes';
    } else {
      return 'no';
    }
  };

  init();
  bindEvents();

  runner.listen('start', function () {
    populateQuestion(current);
    runner.toggleScreen('main');
  });
};

var MultipleChoice = function (runner, questions) {
  "use strict";

  var
    current = 0,
    elems = {
      title: document.getElementById('question-title'),
      choices: document.getElementById('question-choices'),
      form: document.getElementById('question-form')
    }
  ;

  var bindEvents = function () {
    elems.form.addEventListener('submit', function (e) {
      e.preventDefault();
      advanceOrFail();
    });
  };

  var hasAnotherQuestion = function () {
    return !(current == questions.length - 1);
  };

  var createChoiceElement = function (i, label) {
    var tmpLi, tmpRadio, tmpLabel;
    tmpLi = document.createElement('li');

    tmpRadio = document.createElement('input');
    tmpRadio.setAttribute('type', 'radio');
    tmpRadio.setAttribute('name', 'question-choices');
    tmpRadio.id = 'choice-' + i;
    tmpRadio.setAttribute('data-id', i);
    tmpLi.appendChild(tmpRadio);

    tmpLabel = document.createElement('label');
    tmpLabel.setAttribute('for', 'choice-' + i);
    tmpLabel.innerHTML = runner.escape(label);
    tmpLi.appendChild(tmpLabel);

    return tmpLi;
  };

  var populateQuestion = function (id) {
    var i = 0, t = questions[id].choices.length;

    elems.choices.innerHTML = '';
    elems.title.innerHTML = runner.escape(questions[id].question);

    for (i; i<t; i++) {
      elems.choices.appendChild(createChoiceElement(i, questions[id].choices[i]));
    }
  };

  var advanceQuestion = function () {
    if (hasAnotherQuestion()) {
      current++;
      populateQuestion(current);
    } else {
      runner.toggleScreen('main');
      runner.send('end');
    }
  };

  var advanceOrFail = function () {
    switch (isAnswerCorrect()) {
      case 'yes':
        runner.send('success', function () {
          advanceQuestion();
        });
        break;

      case 'no':
        runner.send('failure');
        break;

      default:
        runner.send('failure');
        break;
    }
  };

  var isAnswerCorrect = function () {
    var choice = elems.choices.querySelector(':checked');

    if (!choice) {
      return;
    }

    if (parseInt(choice.getAttribute('data-id'), 10) == questions[current].correct) {
      return 'yes';
    } else {
      return 'no';
    }
  };

  bindEvents();

  runner.listen('start', function () {
    populateQuestion(current);
    runner.toggleScreen('main');
  });
};
